sudo docker pull redis
sudo docker run --name redis-test-instance -p 6379:6379 -d redis
sudo docker ps -a

Dockerize an ASP.NET Core Application:
https://docs.docker.com/samples/dotnetcore/

Install postman
sudo snap install postman 

Setup redis session cache
https://medium.com/@kayamuhammet/asp-net-core-web-application-session-state-management-redis-implementation-dec75e0598c2

Alternative redis cache
https://requestmetrics.com/building/episode-16-using-redis-for-distributed-user-sessions-in-asp-net-core

Run redis session container
sudo docker run --name dist-session-container -p 6379:6379 -d redis
sudo docker rm dist-session-container

ASP.NET Core Session Management with Redis
https://joonasw.net/view/redis-cache-session-store

https://andrewlock.net/an-introduction-to-session-storage-in-asp-net-core/

Install SQL Server Docker Image
sudo docker pull mcr.microsoft.com/mssql/server

Customize SQL Containers
https://docs.microsoft.com/en-us/sql/linux/sql-server-linux-docker-container-configure?view=sql-server-ver15&pivots=cs1-bash

Run SQL Server in a docker container
sudo docker run -e "ACCEPT_EULA=Y" -e "SA_PASSWORD=Anjamen.098" -e "MSSQL_PID=Express" -p 1433:1433 -d mcr.microsoft.com/mssql/server:2019-latest

# SQL Server Custom Initalization
https://hub.docker.com/_/microsoft-mssql-server
https://github.com/microsoft/mssql-docker/issues/2

Connect to the SQL Server Instance
docker exec -it <container_id|container_name> /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P Anjamen.098

Install docker compose 
wget "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -O /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose

Deploy multi-service application
https://docs.microsoft.com/en-us/dotnet/architecture/microservices/multi-container-microservice-net-applications/multi-container-applications-docker-compose

Tear down and remove all the deployed docker containers
sudo docker-compose down

Install EF Core Package
dotnet add package Microsoft.EntityFrameworkCore.SqlServer

Get Container's IP address
docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}'

BCrypt password hashing
https://jasonwatmore.com/post/2020/07/16/aspnet-core-3-hash-and-verify-passwords-with-bcrypt
Bcrypt uses the Blowfish cypher.
Blowfish is slow enough to prevent certain attacks.
The salted hash meets security recommendations on length and unpredictability.
Bcrypt is widely used and has been around for many years (it was created in 1999). 
Reported issues are scarce, and no one has broken the Blowfish algorithm.
dotnet add package BCrypt.Net-Next

# Postman test scripts
https://learning.postman.com/docs/writing-scripts/test-scripts/
https://learning.postman.com/docs/writing-scripts/script-references/test-examples/

# Docker Networking
https://docs.docker.com/config/containers/container-networking/
https://docs.docker.com/compose/networking/

TODO: Check AspNetCore Best Practices for Passwords! 
TODO: Setup Password Difficulty Policy
TODO: Finish up the web application.
TODO: Containerize the web application.
TODO: Reseach different authentication methods (cookie, asp.net core, identity, membership)
TODO: Setup HTTPS


# Kestrel HTTPs URLs

launchConfiguraion: 
"ASPNETCORE_URLS": "http://localhost:8000;https://localhost:8001"

"profiles": {
    "IIS Express": {
      "commandName": "IISExpress",
      "launchBrowser": true,
      "launchUrl": "swagger",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    },
    "code": {
      "commandName": "Project",
      "dotnetRunMessages": "true",
      "launchBrowser": true,
      "launchUrl": "swagger",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
        
      }
    }
  }
  
  "IIS Express": {
      "commandName": "IISExpress",
      "launchBrowser": true,
      "launchUrl": "swagger",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    },

"Kestrel": {
    "Endpoints": {
      "Http": {
        "Url": "http://localhost:6000"
      },
      "Https": {
        "Url": "https://localhost:6001",
        "Certificate": {
          "Path": "/home/ubuntu/.aspnet/https/aspnetapp.pfx",
          "Password": "Test.123!"
        }
      }
    },
    "Certificates": {
      "Default": {
        "Path": "/home/ubuntu/.aspnet/https/aspnetapp.pfx",
        "Password": "Test.123!"
      }
    }
  }
