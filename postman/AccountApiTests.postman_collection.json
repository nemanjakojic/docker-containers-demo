{
	"info": {
		"_postman_id": "2325d0c3-c4da-49d2-b3aa-a23d3acd9858",
		"name": "AccountApiTests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "SignUp - Success (Valid Inputs)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is in JSON format\", function () {",
							"    pm.expect(pm.response).to.be.jsonBody();",
							"    pm.expect(pm.response.json()).to.haveOwnProperty(\"success\");",
							"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\");",
							"});",
							"",
							"pm.test(\"Success flag is true\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(true);",
							"});",
							"",
							"pm.test(\"Message is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.be.eql(\"Account registered successfully.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{$randomEmail}}\",\n    \"password\": \"{{valid_password}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{account_api_url}}/account/signup",
					"host": [
						"{{account_api_url}}"
					],
					"path": [
						"account",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "SignUp - Failure (Existing Account)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response is in JSON format\", function () {",
							"    pm.expect(pm.response).to.be.jsonBody();",
							"    pm.expect(pm.response.json()).to.haveOwnProperty(\"success\");",
							"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\");",
							"});",
							"",
							"pm.test(\"Success flag is false\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(false);",
							"});",
							"",
							"pm.test(\"Message is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.be.eql(\"Unable to sign up - account already exists.\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"nemanja.kojic@gmail.com\",\n    \"password\": \"{{valid_password}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{account_api_url}}/account/signup",
					"host": [
						"{{account_api_url}}"
					],
					"path": [
						"account",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "SignUp - Failure (Empty Username)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response is in JSON format\", function () {",
							"    pm.expect(pm.response).to.be.jsonBody();",
							"    pm.expect(pm.response.json()).to.haveOwnProperty(\"success\");",
							"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\");",
							"});",
							"",
							"pm.test(\"Success flag is false\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(false);",
							"});",
							"",
							"pm.test(\"Message is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.be.eql(\"Unable to sign up - invalid username.\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"  \",\n    \"password\": \"{{valid_password}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{account_api_url}}/account/signup",
					"host": [
						"{{account_api_url}}"
					],
					"path": [
						"account",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "SignUp - Failure (Null Username)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response is in JSON format\", function () {",
							"    pm.expect(pm.response).to.be.jsonBody();",
							"    pm.expect(pm.response.json()).to.haveOwnProperty(\"success\");",
							"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\");",
							"});",
							"",
							"pm.test(\"Success flag is false\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(false);",
							"});",
							"",
							"pm.test(\"Message is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.be.eql(\"Unable to sign up - invalid username.\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": null,\n    \"password\": \"{{valid_password}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{account_api_url}}/account/signup",
					"host": [
						"{{account_api_url}}"
					],
					"path": [
						"account",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "SignUp - Failure (Empty Password)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response is in JSON format\", function () {",
							"    pm.expect(pm.response).to.be.jsonBody();",
							"    pm.expect(pm.response.json()).to.haveOwnProperty(\"success\");",
							"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\");",
							"});",
							"",
							"pm.test(\"Success flag is false\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(false);",
							"});",
							"",
							"pm.test(\"Message is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.be.eql(\"Unable to sign up - invalid password.\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{$randomEmail}}\",\n    \"password\": \"  \"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{account_api_url}}/account/signup",
					"host": [
						"{{account_api_url}}"
					],
					"path": [
						"account",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "SignUp - Failure (Null Password)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response is in JSON format\", function () {",
							"    pm.expect(pm.response).to.be.jsonBody();",
							"    pm.expect(pm.response.json()).to.haveOwnProperty(\"success\");",
							"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\");",
							"});",
							"",
							"pm.test(\"Success flag is false\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(false);",
							"});",
							"",
							"pm.test(\"Message is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.be.eql(\"Unable to sign up - invalid password.\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{$randomEmail}}\",\n    \"password\": null\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{account_api_url}}/account/signup",
					"host": [
						"{{account_api_url}}"
					],
					"path": [
						"account",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "SignUp - Failure (Wrong Credentials)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response is in JSON format\", function () {",
							"    pm.expect(pm.response).to.be.jsonBody();",
							"    pm.expect(pm.response.json()).to.haveOwnProperty(\"success\");",
							"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\");",
							"});",
							"",
							"pm.test(\"Success flag is false\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(false);",
							"});",
							"",
							"pm.test(\"Message is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.be.oneOf([",
							"        \"Unable to sign up - invalid password.\",",
							"        \"Unable to sign up - invalid username.\"",
							"    ]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \" \",\n    \"password\": null\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{account_api_url}}/account/signup",
					"host": [
						"{{account_api_url}}"
					],
					"path": [
						"account",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login - Failure (Wrong Username)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response is in JSON format\", function () {",
							"    pm.expect(pm.response).to.be.jsonBody();",
							"    pm.expect(pm.response.json()).to.haveOwnProperty(\"success\");",
							"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\");",
							"});",
							"",
							"pm.test(\"Success flag is false\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(false);",
							"});",
							"",
							"pm.test(\"Message is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"Unabled to log in - account not found.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{nonexisting_email}}\",\n    \"password\": \"{{valid_password}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{account_api_url}}/account/login",
					"host": [
						"{{account_api_url}}"
					],
					"path": [
						"account",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login - Failure (Wrong Password)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response is in JSON format\", function () {",
							"    pm.expect(pm.response).to.be.jsonBody();",
							"    pm.expect(pm.response.json()).to.haveOwnProperty(\"success\");",
							"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\");",
							"});",
							"",
							"pm.test(\"Success flag is false\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(false);",
							"});",
							"",
							"pm.test(\"Message is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"Unable to log in - wrong password.\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{existing_email}}\",\n    \"password\": \"{{wrong_password}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{account_api_url}}/account/login",
					"host": [
						"{{account_api_url}}"
					],
					"path": [
						"account",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login - SQL Injection Attempt (Refused)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response is in JSON format\", function () {",
							"    pm.expect(pm.response).to.be.jsonBody();",
							"    pm.expect(pm.response.json()).to.haveOwnProperty(\"success\");",
							"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\");",
							"});",
							"",
							"pm.test(\"Success flag is false\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(false);",
							"});",
							"",
							"pm.test(\"Message is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.be.oneOf([",
							"        \"Unabled to log in - account not found.\",",
							"        \"Unable to log in - wrong password.\"",
							"    ]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{existing_email}}\",\n    \"password\": \"' or ' 1=1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{account_api_url}}/account/login",
					"host": [
						"{{account_api_url}}"
					],
					"path": [
						"account",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login - Success (Valid Account)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is in JSON format\", function () {",
							"    pm.expect(pm.response).to.be.jsonBody();",
							"    pm.expect(pm.response.json()).to.haveOwnProperty(\"success\");",
							"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\");",
							"});",
							"",
							"pm.test(\"Success flag is true\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(true);",
							"});",
							"",
							"pm.test(\"Message is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.be.oneOf([",
							"        \"Logged in successfully.\",",
							"        \"Already logged in.\"",
							"    ]);",
							"});",
							"",
							"pm.test(\"Session cookie is present\", function() {",
							"    pm.expect(pm.cookies.has(\"AppCookie\")).to.be.true;",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{existing_email}}\",\n    \"password\": \"{{valid_password}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{account_api_url}}/account/login",
					"host": [
						"{{account_api_url}}"
					],
					"path": [
						"account",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Repeated Login - Success (Valid Account)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is in JSON format\", function () {",
							"    pm.expect(pm.response).to.be.jsonBody();",
							"    pm.expect(pm.response.json()).to.haveOwnProperty(\"success\");",
							"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\");",
							"});",
							"",
							"pm.test(\"Success flag is true\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(true);",
							"});",
							"",
							"pm.test(\"Message is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.be.oneOf([",
							"        \"Logged in successfully.\",",
							"        \"Already logged in.\"",
							"    ]);",
							"});",
							"",
							"pm.test(\"Session cookie is present\", function() {",
							"    pm.expect(pm.cookies.has(\"AppCookie\")).to.be.true;",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{existing_email}}\",\n    \"password\": \"{{valid_password}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{account_api_url}}/account/login",
					"host": [
						"{{account_api_url}}"
					],
					"path": [
						"account",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Logout (Success)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is in JSON format\", function () {",
							"    pm.expect(pm.response).to.be.jsonBody();",
							"    pm.expect(pm.response.json()).to.haveOwnProperty(\"success\");",
							"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\");",
							"});",
							"",
							"pm.test(\"Success flag is true\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(true);",
							"});",
							"",
							"pm.test(\"Message is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.be.oneOf([",
							"        \"Logged out successfully.\"",
							"    ]);",
							"});",
							"",
							"pm.test(\"Session cookie is gone\", function() {",
							"    pm.expect(pm.cookies.has(\"AppCookie\")).to.be.false;",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{account_api_url}}/account/logout",
					"host": [
						"{{account_api_url}}"
					],
					"path": [
						"account",
						"logout"
					]
				}
			},
			"response": []
		},
		{
			"name": "Repeated Logout (Success)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is in JSON format\", function () {",
							"    pm.expect(pm.response).to.be.jsonBody();",
							"    pm.expect(pm.response.json()).to.haveOwnProperty(\"success\");",
							"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\");",
							"});",
							"",
							"pm.test(\"Success flag is true\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(true);",
							"});",
							"",
							"pm.test(\"Message is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.be.oneOf([",
							"        \"Logged out successfully.\"",
							"    ]);",
							"});",
							"",
							"pm.test(\"Session cookie is gone\", function() {",
							"    pm.expect(pm.cookies.has(\"AppCookie\")).to.be.false;",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{account_api_url}}/account/logout",
					"host": [
						"{{account_api_url}}"
					],
					"path": [
						"account",
						"logout"
					]
				}
			},
			"response": []
		}
	]
}